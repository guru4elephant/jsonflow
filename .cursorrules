# 项目说明
- 以json格式的文件或者标准输入作为输入的库
- 对于加载到内存的json,，可以通过operator进行处理，每个operator可以处理一个或者多个json作为输入，同时对于每个operator只有一个json作为输出
- 多个operator串联起来可以形成一个pipeline，pipeline可以同步或异步执行
- 对于jsonl文件的输入和输出，有对应的io模块进行读写
- 对于一个jsonl文件的多个json，可以用并发执行器多线程或者多个子进程执行pipeline，最终的结果与输入的jsonl文件的顺序一致
- operator可以二次开发
- 对于调用大语言模型，有一类特殊的operator，专门负责大语言模型的调用


下面是jsonflow的示例代码，参考这个代码，开发一个类似的库。
``` python
from jsonflow.core import Pipeline
from jsonflow.io import JsonLoader, JsonSaver
from jsonflow.operators.json_ops import TextNormalizer
from jsonflow.operators.model import ModelInvoker

# Create a simple pipeline
pipeline = Pipeline([
    TextNormalizer(),
    ModelInvoker(model="gpt-3.5-turbo"),
    JsonSaver("output.jsonl")
])

json_lines_writer = JsonSaver("output.jsonl")
json_lines = JsonLoader("input.jsonl")
for json_line in json_lines:
    for op in pipeline:
        print(op.name)
        print(op.description)
        json_line = op.process(json_line)
    json_lines_writer.write(json_line)

```
先给出整体软件架构设计，包括类的设计，成员对象等，形成architecture.md文件。
根据architecture.md文件，给出具体的implementation_design.md文件。
你的软件修改要始终遵守这两个md文件的内容。如果涉及到这两个md文件的内容修改，做了变更后也需要做对应的软件实现的修改。

注意根据软件给出对应的单元测试代码和示例代码。


